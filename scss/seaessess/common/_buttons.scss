@import "seaessess/settings";

@mixin button-size($padding:$button-med, $full-width:false) {
    // We control which padding styles come through,
    // these can be turned off by setting $padding:false
    @if $padding {
        padding-top: $padding;
        padding-#{$default-opposite}: $padding * 2;
        padding-bottom: $padding + 1;
        padding-#{$default-float}: $padding * 2;

        // We control the font-size based on mixin input.
        @if      $padding == $button-med { font-size: $button-font-med; }
        @else if $padding == $button-tny { font-size: $button-font-tny; }
        @else if $padding == $button-sml { font-size: $button-font-sml; }
        @else if $padding == $button-lrg { font-size: $button-font-lrg; }
    }

    // We can set $full-width:true to remove side padding extend width.
    @if $full-width {
        // We still need to check if $padding is set.
        @if $padding {
            padding-top: $padding;
            padding-bottom: $padding 1;
        } @else if $padding == false {
            padding-top:0;
            padding-bottom:0;
        }
            padding-right: 0;
            padding-left: 0;
            width: 100%;
    }
}

@mixin button-base($style:true, $display:$button-display) {
    @if $style {
        border-style: $button-border-style;
        border-width: $button-border-width;
        cursor: pointer;
        font-family: $button-font-family;
        font-weight: $button-font-weight;
        line-height: normal;
        margin: 0 0 $button-margin-bottom;
        position: relative;
        text-decoration: none;
        text-align: $button-font-align;
        -webkit-appearance: none;
        -webkit-border-radius:0;
        -webkit-font-smoothing: antialiased;
        &:focus, &:active { outline: none; }
    }
    @if $display { display: $display; }
}

@mixin button-style($bg:$button-bg-color, $radius:false, $disabled:false, $bg-hover:null, $border-color:null) {

    // We control which background styles are used,
    // these can be removed by setting $bg:false
    @if $bg {

        @if $bg-hover == null {
            $bg-hover: if($bg == $button-bg-color, $button-bg-hover, scale-color($bg, $lightness: $button-function-factor));
        }

        @if $border-color == null {
            $border-color: if($bg == $button-bg-color, $button-border-color, scale-color($bg, $lightness: $button-function-factor));
        }

        // This find the lightness percentage of the background color.
        $bg-lightness: lightness($bg);
        $bg-hover-lightness: lightness($bg-hover);

        background-color: $bg;
        border-color: $border-color;
        &:hover,
        &:focus { background-color: $bg-hover; }

        // We control the text color for you based on the background color.
        color: if($bg-lightness > 70%, $button-font-color-alt, $button-font-color);

        &:hover,
        &:focus {
        color: if($bg-hover-lightness > 70%, $button-font-color-alt, $button-font-color);
        }
    }

    // We can set $disabled:true to create a disabled transparent button.
    @if $disabled {
        cursor: $button-disabled-cursor;
        opacity: $button-disabled-opacity;
        box-shadow: none;
        &:hover,
        &:focus { background-color: $bg; }
    }

    // We can control how much button radius us used.
    @if $radius == true { @include radius($button-radius); }
    @else if $radius { @include radius($radius); }

}

@mixin button($padding:$button-med, $bg:$button-bg-color, $radius:false, $full-width:false, $disabled:false, $is-input:false, $is-prefix:false, $bg-hover:null, $border-color:null, $transition: true) {
    @include button-base;
    @include button-size($padding, $full-width);
    @include button-style($bg, $radius, $disabled, $bg-hover, $border-color);

    @if $transition {
        @include single-transition(background-color);
    }
}

/* Buttons */
@include exports("button") {
    button, .button {
        @include button-base;
        @include button-size;
        @include button-style;

        @include single-transition(background-color);

        &.secondary { @include button-style($bg:$secondary-color, $bg-hover:$secondary-button-bg-hover, $border-color:$secondary-button-border-color); }
        &.success   { @include button-style($bg:$success-color, $bg-hover:$success-button-bg-hover, $border-color:$success-button-border-color); }
        &.alert     { @include button-style($bg:$alert-color, $bg-hover:$alert-button-bg-hover, $border-color:$alert-button-border-color); }

        &.large  { @include button-size($padding:$button-lrg); }
        &.small  { @include button-size($padding:$button-sml); }
        &.tiny   { @include button-size($padding:$button-tny); }
        &.expand { @include button-size($padding:null,$full-width:true); }

        &.left-align  { text-align: left; text-indent: rem-calc(12); }
        &.right-align { text-align: right; padding-right: rem-calc(12); }

        &.radius { @include button-style($bg:false, $radius:true); }
        &.round  { @include button-style($bg:false, $radius:$button-round); }

        &.disabled, &[disabled] { @include button-style($bg:$button-bg-color, $disabled:true, $bg-hover:$button-bg-hover, $border-color:$button-border-color);
            &.secondary { @include button-style($bg:$secondary-color, $disabled:true, $bg-hover:$secondary-button-bg-hover, $border-color:$secondary-button-border-color); }
            &.success { @include button-style($bg:$success-color, $disabled:true, $bg-hover:$success-button-bg-hover, $border-color:$success-button-border-color); }
            &.alert { @include button-style($bg:$alert-color, $disabled:true, $bg-hover:$alert-button-bg-hover, $border-color:$alert-button-border-color); }
        }
    }

    button::-moz-focus-inner { border: 0; padding: 0; }

    @media #{$medium-up} {
        button, .button {
            @include button-base($style:false, $display:inline-block);
            @include button-size($padding:false, $full-width:false);
        }
    }
}
