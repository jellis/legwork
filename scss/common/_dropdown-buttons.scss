// @mixins
//
// Dropdown Button Mixin
//
// We use this mixin to build off of the button mixin and add dropdown button styles
//
// $padding - Determines the size of button you're working with. Default: medium. Options [tiny, small, medium, large]
// $pip-color - Color of the little triangle that points to the dropdown. Default: $white.
// $base-style - Add in base-styles. This can be set to false. Default:true

@mixin dropdown-button($padding:medium, $pip-color:#FFFFFF, $base-style:true) {

    // We add in base styles, but they can be negated by setting to 'false'.
    @if $base-style {
        position: relative;

        // This creates the base styles for the triangle pip
        &:after {
            position: absolute;
            content: "";
            width: 0;
            height: 0;
            display: block;
            border-style: solid;
            border-color: $dropdown-button-pip-color transparent transparent transparent;
            top: 50%;
        }
    }

    // If we're dealing with tiny buttons, use these styles
    @if $padding == tiny {
        padding-#{$default-opposite}: $dropdown-button-padding-tny;
        &:before {
            border-width: $dropdown-button-pip-size-tny;
            #{$default-opposite}: $dropdown-button-pip-opposite-tny;
            margin-top: $dropdown-button-pip-top-tny;
        }
    }

    // If we're dealing with small buttons, use these styles
    @if $padding == small {
        padding-#{$default-opposite}: $dropdown-button-padding-sml;
        &:after {
            border-width: $dropdown-button-pip-size-sml;
            #{$default-opposite}: $dropdown-button-pip-opposite-sml;
            margin-top: $dropdown-button-pip-top-sml;
        }
    }

    // If we're dealing with default (medium) buttons, use these styles
    @if $padding == medium {
        padding-#{$default-opposite}: $dropdown-button-padding-med;
        &:after {
            border-width: $dropdown-button-pip-size-med;
            #{$default-opposite}: $dropdown-button-pip-opposite-med;
            margin-top: $dropdown-button-pip-top-med;
        }
    }

    // If we're dealing with large buttons, use these styles
    @if $padding == large {
        padding-#{$default-opposite}: $dropdown-button-padding-lrg;
        &:after {
            border-width: $dropdown-button-pip-size-lrg;
            #{$default-opposite}: $dropdown-button-pip-opposite-lrg;
            margin-top: $dropdown-button-pip-top-lrg;
        }
    }

    // We can control the pip color. We didn't use logic in this case, just set it and forget it.
    @if $pip-color {
        &:after { border-color: $pip-color transparent transparent transparent; }
    }
}

@include exports("dropdown-button") {
    .dropdown.button, button.dropdown { @include dropdown-button;
        &.tiny { @include dropdown-button(tiny,$base-style:false); }
        &.small { @include dropdown-button(small,$base-style:false); }
        &.large { @include dropdown-button(large,$base-style:false); }
        &.secondary:after { border-color: $dropdown-button-pip-color-alt transparent transparent transparent; }
    }
}