// Reusable mixins

// IMPORT ONCE
// We use this to prevent styles from being loaded multiple times for components that rely on other components. 
$modules: () !default;
@mixin exports($name) {
    @if (index($modules, $name) == null) {
        $modules: append($modules, $name);
        @content;
    }
    @else {
        p.error { font-size: 1100px; }
    }
}

@mixin clearfix() {
    *zoom: 1;
    &:before, &:after { content: " "; display: table; }
    &:after { clear: both; }
}

// We use this to create equal side border radius on elements.
// $side - Options: left, right, top, bottom
@mixin side-radius($side, $radius:$global-radius) {
    @if ($side == left or $side == right) {
        -webkit-border-bottom-#{$side}-radius: $radius;
        -webkit-border-top-#{$side}-radius: $radius;
        border-bottom-#{$side}-radius: $radius;
        border-top-#{$side}-radius: $radius;
    } @else {
        -webkit-#{$side}-left-radius: $radius;
        -webkit-#{$side}-right-radius: $radius;
        border-#{$side}-left-radius: $radius;
        border-#{$side}-right-radius: $radius;
    }
}

// We use this to control border radius.
// $radius - Default: $global-radius || 4px
@mixin radius($radius:$global-radius) {
    @if $radius {
        @include border-radius($radius);
    }
}

// We use this to add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
    transition: $property $speed $ease;
}

@mixin block-glowing-effect($selector:focus, $fade-time:300ms, $glowing-effect-color:fade-out($primary-color, .25)) {
    transition: box-shadow $fade-time, border-color $fade-time ease-in-out;
    &:#{$selector} {
        box-shadow: 0 0 5px $glowing-effect-color;
        border-color: $glowing-effect-color;
    }
}

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
    position: absolute !important;
    height: 1px;
    width: 1px;
    overflow: hidden;
    clip: rect(1px, 1px, 1px, 1px);
}

// @mixins
//
// Turns off the element-invisible effect.
@mixin element-invisible-off {
    position: static !important;
    height: auto;
    width: auto;
    overflow: visible;
    clip: auto;
}


